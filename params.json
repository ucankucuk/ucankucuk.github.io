{
  "name": "| JAVA |",
  "tagline": "Blog",
  "body": "#Java StringBuilder & StringBuffer\r\n\r\n* StringBuilder nesneleri değiştirilebilir olması haricinde String nesnelerine benzer.\r\n* StringBuilder karakter dizisi içeren değişken uzunlukta ki diziler gibi davranır.\r\n* Herhangi bir noktada metod çağırımıyla uzunluk ve dizi içeriği değiştirilebilir.\r\n* Örneğin StringBuilder nesnelerinde **append() , insert(), reverse() , replace()** metodları vardır.\r\n* Çok sayıda dizileri bağlamada , StringBuilder nesnelerini kullanmak daha verimlidir.\r\n\r\n#Length & Capacity \r\n\r\n* StingBuilder sınıfı length() metoduna sahiptir.Bu özelliğiyle String sınıfına benzerdir.Ayrıca StringBuilder'ın **capacity()** metodu vardır.Bu metod StringBuilder'ın kapasitesini geri döndürür.Bu özellik String sınıfında yoktur.\r\n\r\n| Yapıcı(Constructor)                 | Açıklama                                                      | \r\n|-------------------------------------|---------------------------------------------------------------| \r\n| **StringBuilder()**                 | Boş bir StringBuilder oluşturur(Kapasitesi : 16)              | \r\n| **StringBuilder(CharSequence cs)**  | CharSequence içeriğinin aynısını 16 boş elemanlı haliyle bir  | \r\n|                                     |StringBuilder oluştururur.                                     | \r\n| **StringBuilder(int initCapacity)** | initCapacity uzunluğu kadar kapasiteli bir StringBuilder      | \r\n|                                     | oluşturur.                                                    | \r\n\r\n~~~~java\r\npackage ucankucuk.github.io;\r\n\r\npublic class CapacityOfStringBuilder {\r\n\r\n    public static void main(String[] args) {\r\n        StringBuilder sb = new StringBuilder();//16 Kapasiteli StringBuilder oluşturduk.\r\n        sb.append(\"Greetings\");//9 karakterlik bir String ekledik.\r\n    }\r\n\r\n}\r\n~~~~\r\n* StringBuilder'ın durumu:\r\n* ![ucankucuk.github.io](https://docs.oracle.com/javase/tutorial/figures/java/objects-stringBuffer.gif \"ucankucuk.github.io\")\r\n* StringBuilder sınıfının String sınıfından farklı bazı metodları vardır.Bunlar:\r\n\r\n| Metod                                    | Açıklama                                                | \r\n|------------------------------------------|---------------------------------------------------------| \r\n| **void setLength(int newLength)**        | Karakter dizisinin uzunluğunu ayarlar.                  | \r\n| **void ensureCapacity(int minCapacity)** | Stringbuilder'ın kapasitesinin en az minCapacity kadar  | \r\n|                                          | olmasını sağlar                                         | \r\n\r\n* StringBuilder sınıfı **setLength(int newLength)** ile karakter dizisinin uzunluğunu ayarlarken  newlength değeri kendi uzunluğundan büyük olursa dizinin sonuna eksik kadar null değeri ekler.Eğer newlength  değeri kendi uzunluğundan kısaysa da dizinin sonundan gerekilen kadar karakteri siler.\r\n~~~~java\r\npackage ucankucuk.github.io;\r\n\r\npublic class SetLengthMetodExample {\r\n    public static void main(String[] args) {\r\n        StringBuilder sb = new StringBuilder(); // 16 kapasiteli StringBuilder nesnesi oluşturuldu.\r\n        System.out.println(\"Boş StringBuilder nesnesini kapasitesi = \" + sb.capacity());\r\n        System.out.println(\"Boş StringBuilder nesnesinin uzunluğu = \" + sb.length());\r\n        sb.append(\"0123456789ABCDEF\");\r\n        System.out.println(\"Eklenen = 0123456789ABCDEF\" + \" Eklemeden sonra uzunluk = \" + sb.length());\r\n        sb.append(\"UTKU\");\r\n        System.out.println(\"StringBuilder nesnesini içeriği = \" + sb);\r\n        System.out.println(\"Son eklemeden sonra uzunluk = \" + sb.length());\r\n        System.out.println(\"Son eklemeden sonra kapasite = \" + sb.capacity());\r\n\r\n        /*\r\n         * 16 kapasitesindeki sb nesnesine 4 karakter daha eklediğimizde hata vermedi.\r\n         * Çünkü StringBuilder otomatik olarak kapsiteyi arttırdı.\r\n         */\r\n    }\r\n\r\n}\r\n~~~~\r\n\r\n* **Ekran Çıktısı**:\r\n - Boş StringBuilder nesnesini kapasitesi = 16\r\n - Boş StringBuilder nesnesinin uzunluğu = 0\r\n - Eklenen = 0123456789ABCDEF Eklemeden sonra uzunluk = 16\r\n - StringBuilder nesnesini içeriği = 0123456789ABCDEFUTKU\r\n - Son eklemeden sonra uzunluk = 20\r\n - Son eklemeden sonra kapasite =34 \r\n\r\n* Ayrıca **append(), insert(), setLength()** metodları çağırıldığından kapasite otomatik olarak büyür.\r\n\r\n~~~~java\r\npackage ucankucuk.github.io;\r\n\r\npublic class IncreasedAutomatically {\r\n    public static void main(String[] args) {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"0123456789ABCDEF\");\r\n        System.out.println(\"StringBuilding uzunluğu = \" + sb.length() + \" StringBuilder kapasitesi = \" + sb.capacity());\r\n        sb.append(\"UTKU\");\r\n        sb.setLength(5);\r\n        System.out\r\n                .println(\"Değişiklikten sonraki StringBuilder nesnesi = \" + sb + \"\\n\" + \"Değişiklikten sonraki kapasite = \" + sb.capacity() + \"\\n\" + \"Değişiklikten sonraki uzunluk = \" + sb.length());\r\n        /* insert() metodu ile belirlenen yere ekleme yapabiliriz. */\r\n        sb.insert(5, \"5\");\r\n        System.out.println(\"Eklemeden sonra StringBuilder nesnesi = \" + sb + \"\\n\" + \"Eklemeden sonraki kapasite = \" + sb.capacity() + \"\\n\" + \"Eklemeden sonraki uzunluk = \" + sb.length());\r\n    }\r\n}\r\n~~~~\r\n\r\n* Aşağıda `StringBuilder` sınıfının metodları yer almaktadır.\r\n\r\n![ucankucuk.github.io](https://lh5.googleusercontent.com/_xRlML9Wz_ZvkDSqqWr_0u_CPPJa-_1hMRRCOs8U457Sp8kLovNSbADWmGYXf6cE97r_Eo-PZTEMaKCRwUb6NmZn-XNUNfLYRd5hdoSX8-FiYedrfNc \"ucankucuk.github.io\")\r\n\r\n\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}