{
  "name": "Ucankucuk.GitHub.io",
  "tagline": "Blog",
  "body": "SPRİNG TUTORİAL\r\n===============\r\n#SPRİNG NEDİR ?\r\n* Spring kolay ve hızlı geliştirmeler için kapsamlı altyapı desteği sağlayan , açık kaynak kodlu bir framework'tür.\r\n* Rod Johnson Apache 2.0 lisansı altında Haziran 2003'de yazmıştır.\r\n* Enterprise Java için oldukça popüler uygulama geliştirme frameworküdür.\r\n\r\n#Spring Avantajları Nelerdir ?\r\n* Basit Java sınıfları (POJO - Plain Old Java Object) kullanılarak yazılım yapılabilir.Bu sınıfların test edilmesi , debugging ile hataların aranması ve kurulumu(deployment) daha kolaydır.EJB teknolojisinde olduğu gibi bir EJB Container serverine ihtiyaç duyulmamaktadır.\r\n* Spring MVC ile web tabanlı programlar oluşturmak mümkündür.Web uygulamalarında deklaratif transaksiyon yöntemi , güvenlik ve database bağlantısı gibi temel altyapı ihtiyaçları Spring ve Spring MVC tarafından sağlanır.\r\n* Piyasada ki mevcut teknolojilerin entegre edilmesini kolaylaştrmadır.\r\n* Modüler bir yapıya sahiptir.Proje gerekleri doğrultusunda belirli Spring modülleri kullanılablir.\r\n* Konfigürasyon dosyalarında yapılacak ayarlamalar ile otomatik olarak Singleton nesneler oluşturrabilir. Yani özel Singleton sonıflarını oluşturması gereğini ortadan kaldırır.\r\n* Design pattern  kullanımı Spring aracılığıyla kolaylaştırır.\r\n* Sunduğu Servlet Mock sınıfları ile Spring MVC ile oluşturulan web tabanlı programların Tomcat gibi bir Servlet container serverinden bağımsız olarak test edilmesini kolaylaştırır.\r\n\r\n#Dependency Injection(DI):\r\n* Spring in avatajlarındandır.\r\n* Java Object Oriented bir dildir.Nesneleri Java sınıfları ile modelleriz.Bu sınıflarda programda kullanılan nesneler üretilir.Nesneler işlevini yaparken başka nesneleri kullanabilirler.Bu durmdan dolayı NullPointerException oluşabilir.(*Null pointerException:kullanılmak istenen nesnenin null değerine sahip olmasından kaynaklanmaktadır.Daha açık söylemek gerekirse o nesne new operatörü ile oluşturulmamıştır.)Bu hatanın oluşmaması için bağımlılık duyulan nesnelerin oluşturulması gerekmektedir.\r\n* Bunu bir örnekle açıklayalım:\r\nAşağıda ki kodda : `classA`sınıfının `classB` tipinde bir sınıf değişkeni vardır.Bundan dolayı `ClassA` ile `ClassB` arasında bir bağımlılık oluşmaktadır.`ClassA` `ClassB` olmadan print işlevini yapamayacaktır.Haliyle `NullPointerException` oluşacaktır.\r\n~~~java\r\npackage com.uckucuk.github.io;\r\n\r\npublic ClassA{\r\n    private ClassB classB;\r\n    public CLassB getClassB(){\r\n        return classB;\r\n    }\r\n    public void setClassB(ClassB classB){\r\n        this.classB = classB;\r\n    }\r\n    public void print(String msg){\r\n        classB.pring(msg);\r\n    }\r\n} \r\n~~~\r\nBurada `ClassB` POJO'dur.POJO, bir Java sınıfının bir başka sınıf ile extends,implements gibi bağlantılarının yapılmamış, constructor oluşturulmamış ve belirtimler kullanılmamış halidir.(**P**lain **O**ld **J**ava **O**bject)\r\n\r\n~~~java\r\npublic class ClassB{\r\n    public void print(String msg){\r\n        System.out.println(\"msg\");\r\n    }\r\n}\r\n~~~\r\nDurum böyleyken bizim `NullPointerException` hatası alamamız için print metodunu şöyle kullanmamız gerekir.\r\n`Test`:\r\n~~~java\r\npublic class Test{\r\n    public static void main(String[] args){\r\n       ClassA classA = new ClassA();\r\n       ClassB classB = new ClassB();\r\n       classA.setClassB(classB);\r\n       classA.print(\"Hello Spring World\");\r\n    }\r\n}\r\n~~~\r\nGörüldüğü gibi bağımlılık duyulan nesnelerden sadece bir tanesinin değerinin null olması `NullPointerException` oluşturacaktır.Ayrıca tüm nesnelerin new operatörü ile oluşturulup teker teker set edilmeside zahmetli ve zaman alıcı bir iştir.İşte Spring Dependency Injection kullanarak bu işlemi sadeleştirebiliriz.\r\n\r\nSpring ; **applicationContext.xml** isimli bir XML dosyası barındırır.Bu dosyada kullanılacak nesneler tanımlanır.\r\nBu xml dosyası içerisinde her sınıf için **<bean/>** tagleri yer alır.Yukarıda ki örnek için devam edicek olursak:\r\n**`applicationContext.xml`:**\r\n~~~java\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\">\r\n<beans>\r\n      <bean id=\"ClassA\"\r\n            class=\"org.javatasarim.spring.dependencyinjection.ClassA\">\r\n            <property name=\"classB\" ref=\"ClassB\" />\r\n      </bean>\r\n      <bean id=\"ClassB\"\r\n            class=\"org.javatasarim.spring.dependencyinjection.ClassB\">\r\n      </bean>\r\n</beans>\r\n~~~\r\n**`ClassA`** ile **`ClassB`** arasındaki bağı oluşturmak için **<property/>** tagı kullanılır.\r\nBu tag içerisinde **\"name\"** elementi ile enjekte edilmesi gereken değişken tanımlanır.**\"ref\"** elementi ile de referans verilen class'ın ismi taşıyan class hedef olarak gösterilir.\r\n\r\n**Sonuç olarak bu örnekte her bir class için teker teker nesne oluşturup setlemek yerine bu tanımlamaları yaparak **ClassA** oluşturulurken bu sınıfın değişkeni olan **ClassB**'yi de oluşturup **ClassA** nesnesine enjekte edilmesi sağlandı.Tam olarak bu işlemin adı : **Dependency Injection**'dır.\r\n\r\n#Aspect Oriented Programming (AOP):\r\n\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}