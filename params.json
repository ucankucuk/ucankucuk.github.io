{
  "name": "| JAVA |",
  "tagline": "Blog",
  "body": "#JAVA'ya Başlarken :\r\n* Java aslen Sun Microsystem tarafından geliştirilmiş yüksek  seviyeli programlama dilidir.1995 yılında yayımlanmıştır.\r\n* Java Windows , Mac Os , çeşitli Unix sürümleri gibi çeşitli platformlarda çalışır.\r\n* Bu döküman basit ve pratik bir yaklaşımla Java programlama dilini öğretecektir.\r\n\r\nJava:\r\n* **Nesne Yönelimli (Object Oriented)** : Java'da herşey nesnedir.\r\n* **Platform Bağımsız (Platform Independent)** : Bu önemli bir özelliktir.Karşılaştıracak olursak C,C# gibi diller derlendiğinde her makinede çalışabilmesi için 0 ve 1'lerden oluşan makine makine diline çevrilirler.Bu işlem işletim sistemi üzerinde olur.Sonuç olarak her makinede çalışıyor ama Windows'ta derlenmişse farklı , Linux'ta derlenmişse farklı oluyor.Buda yazılan kodun başka platformda çalışmaması anlamına geliyor.Ama Java Platform bağımsızdır.Yazılan kod her yerde çalışır.Bunun nedenide Java JVM(Java Virtual Machine) üzerinde çalışır.Bundan dolayı yazdığınız kod nerede derlenirse derlensin  bytecode'u üretir.Tabi bunun bir dezavantajı yok mudur ? tabiki vardır. Bu deztavantaj ise hızdır.Çünkü JVM işletim sistemiyle birlikte bilgisayarın kaynaklarını kullanır.\r\n* **Kolay (Simple)** : Java öğrenmesi kolay olacak şekilde tasarlanmıştır.\r\n* **Güvenli (Secure)** : java güvenlik özelliğiyle virüssüz sistemler geliştirmenizi sağlar.Kimlik doğrulama yöntemleri ; açık anahtarlı şifrelemeye dayanmaktadır.\r\n* **Tarafsız Mimari (Architectural-Neutral)** : Java platforma bağımsız bir programlama dili olduğundan hiçbir mimari yapıya öncelik vermez ve hiçbir platform için o platforma özel yapılar içermez. Java’nın platformlar ile ilgili kabulleri, bütün platformlar tarafından genel kabul görmüş yapılarla ilgilidir. Dolayısıyla Java ile her türlü mimari yaklaşım kullanılarak her çeşit platform üzerinde uygulama geliştirmek için vardır.\r\n* **Taşınabilir (Portable)** : Java'nın platformlardan bağımsız ve standartlar üzerine kurulmuş yapısı sayesinde Java kodları bir platformdan diğerine değişiklik olmadan hatta derlemeden çalışır.\r\n* **Sağlam (Robust)** : Java kodlarının çalışma zamanında bile oluşabilecek sıradışı durumlarda bile çalışmasına devam edebilme yeteneği vardır.Kodların JVM'de çalışıyor olması hem çalışma anında hemde derleme anında birçok kontrolü rahatça kontrol edilebilmesini sağlıyor.\r\n* **Çok Kanallı (Multithreaded)** : Thread işlem(process) içerisinde bir akıştır.İşletim istemin çalışma mantığı şöyledir:bir işlem başlatıldığında belleğin bir kısmını ona tahsis eder ve kodu belleğe yükler.İşletim sistemi bunun gibi işlemleri CPU gibi sistem kaynaklarını işlemler arasında paylaştırır.Bu paylaştırma çok hızlı gerçekleşir, bundan dolayı aynı anda pek çok program çalışıyormuş izlenimine kapılabiliriz.Benzer bir paylaştırma işlem içerisindeki işlemcikler arasında olur.Böylelikle işlem daha hızlı yapılır.Tüm bu nedenlerden dolayı programlar multithread yapıları daha sık ve etkin kullanmalılardır. Ayrıca açıklamak gerekirse : thread'ler işlemlere göre daha hızlı oluşturulurlar,aralarında da veri iletimi çok daha kolaydır.\r\n* **Yüksek Performanslı (High Performance)** : Just-In-Time compiler kullanımıyla birlikte Java yüksek performanslara ulaşabilir.Peki Just-In-Time Compiler nedir ? Just-In-Time compiler : Türkçe karşılığına Son dakika derleyicisi diyebiliriz.Yazdığımız \"high level \" kod makine koduna(0-1 lere) dönüşmeden önce \"middle level\" kodlara dönüştürülüyor.Bu \"middle level\" kodlar makine için hiçbir şey ifade etmez.Projeyi run ettiğimiz sırada Just-In-Time devreye giriyor ve bir son dakika derlemesi yapıyor.Böylece \"middle level\" kodlar makine diline çevriliyor. Tabi bunu bunu hepsini derleyerek değilde sadece kullanılacak yeri derleyip geri kalan kısmını yorumlayarak yapıyor.Yani burdan çıkaracağımız : Tekrar tam derleme gerekmediği ve tekrar tekrar aynı işlemlere gerek kalmadığı için hız artışı sağlamış oluyoruz.\r\n* **Dinamik (Dynamic)** : Java gelişen ortama uyum için tasarlanmıştır.Dinamik çalışmaya önem verir.Çalışma zamanında nesnelere erişime, bytecode'un küçük parçalarının güncellenmesine izin verir.\r\n\r\n#Temel Sözdizimi (Basic Syntax)\r\n* **Nesne (Object)** : Nesneler davranış(behaviours) ve durumlara(states) sahiptirler. Örnek olarak köpek nesnesini ele alalım.Köpeğin rengi , adı , cinsi Bir state'dir.Köpeğin havlaması , ısırması , koşması ise birer behaviour'dur.\r\n* **Sınıf (Class)** : Sınıflar durum ve davranışların tanımlandığı bir şablon/plan olarak tanımlanabilir.\r\n* **Metod (Method)** : Metod temel olarak bir davranıştır(behaviour).Bir sınıf birden çok metod içerebilir.\r\n* **Değişkenler (Instance Variables)** :Değişkenler de temel olarak durumlardır(state).\r\n\r\n**İlk Java Koduna Merhaba Dünya dedirterek başlayalım**\r\n~~~~java\r\npublic class IlkjavaProgrami {\r\n\r\n   /* Bu bir çok satırlı yorum satırıdır.  \r\n    * Program \"Merhaba Dünya\" çıktısınız üretiyor.\r\n    */\r\n\t\r\n    public static void main(String []args) {\r\n       System.out.println(\"Merhaba Dünya\"); \r\n    }\r\n} \r\n~~~~\r\n\r\nEkstralar:\r\nJava programları hakkında aşağıdakiler akılda tutmak çok önemlidir.\r\n* **Case Sensitivity**: Java harfe duyarlıdır.Örneğin hello ile Hello farklı şeylerdir.\r\n~~~~java\r\npublic class CaseSensitive {\r\n    String hello = \"küçük harfli hello\";\r\n    String Hello = \"büyük harfli Hello\";\r\n\r\n    public static void main(String []args) {\r\n         System.out.println(hello);\r\n         System.out.println(Hello); \r\n    }\r\n} \r\n~~~~\r\n* **Sınıf İsimleri (Class Names)** : Tüm sınıf isimlendirmelerinde kelimelerin ilk harfinin büyük olmasına özen gösterin.eğer ki birkaç kelimeden oluşan bir sınıf ismi tanımlayacaksanız tüm kelimelerin ilk harfini büyük yazın.\r\nÖrn:`IlkJavaProgramim`\r\n* **Metod İsimleri (Method Names)** : Tüm sınıf isimlendirmelerinde kelimenin ilk harfinin küçük olmasına özen gösterin.Eğer ki birkaç kelimeden oluşan bir metod ismi tanımlayacaksanız ilk kelimenin ilk harfi küçük , diğer kelimelerin ilk harflerini büyük yazın. Örn:`metodIsımlendirmeOrnegi`\r\n* **Program Dosya İsimleri** : Programın dosya ismiyle içinde ki sınıf isminin aynı olmasına özen gösterin.\r\nÖrn: sınıf ismi -> `IlkJavaProgramim` dosya ismi -> `IlkJavaProgramim.java`\r\n* **public static void main(String args[])** Java program işlemi main metodun başlar.\r\n* Son olarak değişken , sınıf , metod isimlendirmelerinde ingilizce karakterlere özen gösterin.\r\n\r\n#Sınıf-Nesne (Class-Object)\r\nJava nesne yönelimli programlama dilidir.\r\nNesne yönelimli programlama dillerinde ki gibi aşağıdakileri destekler:\r\n* **Polymorphism**\r\n* **Inheritance**\r\n* **Encapsulation**\r\n* **Abstraction**\r\n* **Classes**\r\n* **Objects**\r\n* **Instance**\r\n* **Method**\r\n* **Message Parsing**\r\n\r\nEğer gerçek dünyayı düşünürsek etrafımızda köpek,kedi ,insan birçok nesne bulabiliriz.Bir köpeği düşünecek olursak adı , rengi bu köpeğin durumu , havlaması , ısırması , koşması da davranışıdır.Eğer yazılım nesne ile gerçek hayatta ki nesneyi karşılaştırırsak benzer özellikler gösterirler.Yazılım nesnesi  davranışlara sahiptir.\r\n~~~~java\r\npublic class Dog{\r\n     String name;\r\n     int age;\r\n     String color;\r\n     \r\n     void barking(){\r\n         System.out.println(\"Dog is barking\");\r\n     }\r\n     void sleeping(){\r\n         System.out.println(\"Dog is sleeping\");\t   \r\n     }\r\n}\r\n~~~~\r\n\r\n#TODO\r\n\r\n#Temel Veri Tipleri(Basic Data Types)\r\n* Bir değişken oluşturduğunuz zaman memory'de bir alan rezerv etmiş olursunuz.\r\n* Veri tipine göre , işletim sistemi hafıza ayırır ve rezerv edilmiş hafızada ne saklanabilir kararı verir.\r\n* Veri tipleri verilerin bilgisayar üzerinde ki bir modellemesi gibidir.Her programlama dilinde veri tipleri vardır ve bu programlama dilleri bu veri tiplerini farklı şekillerde yorumlayabilir.\r\n* Java type-safe (tip-güvenli) bir dil olduğundan bir değişken oluştururken bu değişkenin tipini belirtmek zorundayız.    \r\n* Java'da iki çeşit veri tipi vardır.\r\n  - **Primitive Veri Tipi**\r\n  - **Referans Veri Tipi**\r\n\r\n##Primitive (İlkel) Veri Tipi:\r\n* Bir anahtar kelime ile dil tarafından önceden tanımlanmış ve adlandırılmıştır.\r\n* Java'da 8 primitive tip desteklenir.Bunlar ;\r\n  - **byte**: en küçük tamsayı primitive tiptir. 8 bit uzunluğundadır.**-128** ile **127**arasındadır. Default değeri **0**'dır.Tanımlamasına örnek olarak :\r\n  `byte b = 100`\r\n  - **short**: 16 bit uzunluğundadır. **-32,768** ile  **32,767** aralığındadır. Default değeri **0**'dır.Tanımlamasına örnek olarak:`short s = 10000`\r\n  - **int**: 32 bit uzunluğundadır. **- 2,147,483,648.** ile **2,147,483,647.** aralığındadır.Default değeri 0'dır.Tanımlamasına örnek olarak : `int i = 100000`\r\n  - **long** 64 bit uzunluğundadır. **-9,223,372,036,854,775,808.** ile **9,223,372,036,854,775,807** aralığındadır.Default değeri 0L'dir. Tanımlamasına örnek olarak : `long a = 100000L`\r\n  - **float** : Kesirli sayıların gerekli olduğu durumlarda kullanılırlar.32 bit uzunluğundadır. Default değeri : **0.0f.**'dir.Tanımlamasına örnek olarak : `float f = 234.5f`\r\n  - **double** : Kesirli sayıların gerekli olduğu durumlarda kullanılırlar.64 bit uzunluğundadır. Default olarak : **0.0d.**'dir. Tanımlamasına örnek olarak : `double d = 123.4`\r\n  - **boolean** : Bilgi bitini temsil eder. True ve false olarak alabileceği iki değeri vardır. Default değeri **false**'dur. Tanımlamasına örnek olarak : `boolean one = true`.Bu arada bilmekte yarar var java'da true ve false 0 ve 1 değildir. \r\n  - **char** : Java'da karakterleri char veri tipiyle saklarız.Yalnız Java'da bu char veri tipi 16 bit'tir.Diğer dillerde 8 bit'tir. Yani bu veri tipi 16 bit Unicode'dur.\r\n\r\nSon olarak **Java gibi nesne yönelimli programlama dillerinde veri tiplerinin hepsi birer sınıftır.Bu primitive tipler çok sık kullanıldığından Java bu veri tiplerine onlara ait nesneler oluşturmaksızın kullanılması için bir ayrıcalık tanır.**\r\n\r\n|İlkel Veri tipi|Uzunluk|Sınıf|Varsayılan Değer|\r\n|---------------|-----------|-----------|--------------|\r\n|byte|8 bit|Btye|0|\r\n|short|16 bit|Short|0|\r\n|int|32 bit|Integer|0|\r\n|long|64 bit|Long|0L|\r\n|float|32 bit|Float|0.0F|\r\n|double|64 bit|Double|0.0D|\r\n|boolean|1 bit|Boolean|false|\r\n|char|16 bit|Character|‘\\u0000’|\r\n\r\n\r\n##Referans (Referance) Veri Tipi:\r\n\r\n#TODO\r\n\r\n#Java Literals(Değişmezleri)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}